version: '3.8'

services:
  # Database
  postgres:
    image: postgres:14-alpine
    container_name: ccp-postgres
    environment:
      POSTGRES_DB: ccp_dev
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: ccp-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Server
  api:
    build:
      context: ..
      dockerfile: infrastructure/docker/api.Dockerfile
    container_name: ccp-api
    environment:
      NODE_ENV: development
      DATABASE_URL: postgresql://postgres:postgres@postgres:5432/ccp_dev
      REDIS_URL: redis://redis:6379
      JWT_SECRET: dev-secret-key
      API_PORT: 3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ../apps/api:/app/apps/api
      - ../packages:/app/packages
      - /app/node_modules
    command: pnpm --filter @ccp/api dev

  # Web Frontend
  web:
    build:
      context: ..
      dockerfile: infrastructure/docker/web.Dockerfile
    container_name: ccp-web
    environment:
      NODE_ENV: development
      NEXT_PUBLIC_API_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - api
    volumes:
      - ../apps/web:/app/apps/web
      - ../packages:/app/packages
      - /app/node_modules
    command: pnpm --filter @ccp/web dev

volumes:
  postgres_data:
  redis_data:
